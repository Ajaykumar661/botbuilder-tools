name: Test-Yaml-Push-$(Date:yyyyMMdd)$(Rev:.r)
variables:
  var1: value1
jobs:
- job: Job_1
  displayName: Packages
  pool:
    name: Hosted VS2017
  condition: succeeded()
  variables:
    testvar1: "testVal1"
  steps:
  - powershell: echo "##vso[task.setvariable variable=myOutputVar;isOutput=true]this is the value"
    name: setvarStep
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      buildType: specific
      project: '86659c66-c9df-418a-a371-7de7aed35064'
      pipeline: 467
      downloadType: specific

  - powershell: |  
       [string[]]$outvar = (Get-ChildItem *.tgz -Path $(System.ArtifactsDirectory)\drop ).Name;
       [int] $j = $outvar.Length;
       $PackagesDescription = "Pushing $j packages";
       Write-Host $PackagesDescription
       "##vso[task.setvariable variable=PackagesDescription;isOutput=true;]$PackagesDescription";
       
       for ($i = 0; $i -lt $outvar.Length; $i++ ) {
           $p = "pkg$i"
           $n = $outvar[$i];
           "##vso[task.setvariable variable=$p;isOutput=true;]$n";
           Write-Host "$p = $n"
       }
       for ($i = $outvar.Length; $i -lt 15; $i++ ) {
           $p = "pkg$i"
           "##vso[task.setvariable variable=$p;isOutput=true;]";
       }
    name: getPackageNames
    displayName: 'Get package names'

  - script: |  
       echo $(setvarStep.myOutputVar)
       echo $(getPackageNames.PackagesDescription)
       echo $(getPackageNames.pkg0)
       echo $(getPackageNames.pkg1)
    name: echovar
  - powershell: 'Get-ChildItem env:* | sort-object name | Format-Table -Autosize'
    displayName: 'Display env vars'
    continueOnError: true
    condition: succeededOrFailed()

  - task: colinsalmcorner.colinsalmcorner-buildtasks.tag-build-task.tagBuildOrRelease@0
    displayName: 'Tag Build with package names'
    inputs:
      tags: |  
       $(PACKAGESDESCRIPTION)
       $(PKG0)
       $(PKG1)
       $(PKG2)
       $(PKG3)
       $(PKG4)
       $(PKG5)
       $(PKG6)
       $(PKG7)
       $(PKG8)
       $(PKG9)
       $(PKG10)
       $(PKG11)
       $(PKG12)
       $(PKG13)
       $(PKG14)
    continueOnError: true

  - powershell: 'gci env:* | sort-object name'
    displayName: 'Display env vars'

  - powershell: |  
       pushd ..
       Get-ChildItem -Recurse -Force
    displayName: 'Dir workspace'
    continueOnError: true
    condition: succeededOrFailed()

  - powershell: |  
       pushd $(Agent.TempDirectory)
       Get-ChildItem -Recurse -Force
    displayName: 'Dir $(Agent.TempDirectory)'
    enabled: false
    continueOnError: true
    condition: succeededOrFailed()


- job: Job_2
  displayName: Verify
  dependsOn: Job_1
  condition: succeeded()
  pool: server
  variables:
    testVar2: "testVal2"

  steps:
  - task: InvokeRESTAPI@1
    displayName: 'View packages to be pushed'
    inputs:
      serviceConnection: 'SDK_v4 release REST API'
      method: GET
      urlSuffix: '/releases/599/tags?api-version=5.0-preview'
  - task: ManualIntervention@8
    displayName: 'Waiting for user'
    inputs:
      instructions: |
       To review the packages to be pushed: 
       1) Click View logs.
       2) Click View packages.
       To see detailed logs, click View logs, then the Packages job.
    enabled: false
    timeoutInMinutes: 5  

- job: Job_3
  displayName: Push
  pool:
    name: Hosted VS2017
  dependsOn: [Job_1,Job_2]
  condition: succeeded()
  variables:
    PackagesDescription: $[ dependencies.Job_1.outputs['getPackageNames.PackagesDescription'] ]
    Pkg0: $[ dependencies.Job_1.outputs['getPackageNames.PKG0'] ]
    Pkg1: $[ dependencies.Job_1.outputs['getPackageNames.PKG1'] ]
    Pkg2: $[ dependencies.Job_1.outputs['getPackageNames.PKG2'] ]
    Pkg3: $[ dependencies.Job_1.outputs['getPackageNames.PKG3'] ]
    Pkg4: $[ dependencies.Job_1.outputs['getPackageNames.PKG4'] ]
    Pkg5: $[ dependencies.Job_1.outputs['getPackageNames.PKG5'] ]
    Pkg6: $[ dependencies.Job_1.outputs['getPackageNames.PKG6'] ]
    Pkg7: $[ dependencies.Job_1.outputs['getPackageNames.PKG7'] ]
    Pkg8: $[ dependencies.Job_1.outputs['getPackageNames.PKG8'] ]
    Pkg9: $[ dependencies.Job_1.outputs['getPackageNames.PKG9'] ]
    Pkg10: $[ dependencies.Job_1.outputs['getPackageNames.PKG10'] ]
    Pkg11: $[ dependencies.Job_1.outputs['getPackageNames.PKG11'] ]
    Pkg12: $[ dependencies.Job_1.outputs['getPackageNames.PKG12'] ]
    Pkg13: $[ dependencies.Job_1.outputs['getPackageNames.PKG13'] ]
    Pkg14: $[ dependencies.Job_1.outputs['getPackageNames.PKG14'] ]
    PkgList: "$(Pkg0), $(Pkg1), $(Pkg2)"

  steps:
  - powershell: 'gci env:* | sort-object name'
    displayName: 'Display env vars'
  - script: |  
      echo $(PackagesDescription)
      echo $(Pkg0)
    name: echovar2
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts copy'
    inputs:
      buildType: specific
      project: '86659c66-c9df-418a-a371-7de7aed35064'
      pipeline: 467
      downloadType: specific

  - powershell: |  
       Set-Location -Path "$(System.ArtifactsDirectory)\drop";
       New-Item -Path . -Name ".npmrc" -ItemType "file" -Value "registry=https://botbuilder.myget.org/F/scratch/npm/";
    displayName: 'Create .npmrc for MyGet scratch publish'

  - task: npmAuthenticate@0
    displayName: 'Authenticate for NPM publish'
    inputs:
      workingFile: '$(System.ArtifactsDirectory)\drop\.npmrc'
      customEndpoint: 'MyGet scratch npm feed'

  - powershell: |  
       Set-Location -Path "$(System.ArtifactsDirectory)\drop";
       Get-ChildItem . -Filter *.tgz | 
       Foreach-Object {
           Write-Host "Pushing:" $_.FullName;
           npm publish $_.FullName;
       }
    displayName: 'Publish *.tgz '
    enabled: false

  - powershell: |  
       pushd ..
       Get-ChildItem -Recurse -Force
    displayName: 'Dir workspace copy'
    continueOnError: true
    condition: succeededOrFailed()

