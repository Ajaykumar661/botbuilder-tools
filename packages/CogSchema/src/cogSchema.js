#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
var chalk = require("chalk");
var fs = require("fs-extra");
var glob = require("globby");
var lgt = require("../../CogLint/src/lgTracker");
var path = require("path");
var process = require("process");
var program = require("commander");
var semver = require("semver");
var st = require("../../CogLint/src/schemaTracker");
var Validator = require("ajv");
var allof = require('json-schema-merge-allof');
var clone = require('clone');
var parser = require('json-schema-ref-parser');
// tslint:disable-next-line:no-let-requires no-require-imports
var pkg = require('../package.json');
var requiredVersion = pkg.engines.node;
if (!semver.satisfies(process.version, requiredVersion)) {
    console.error("Required node version " + requiredVersion + " not satisfied with current version " + process.version + ".");
    process.exit(1);
}
program.Command.prototype.unknownOption = function (flag) {
    console.error(chalk["default"].redBright("Unknown arguments: " + flag));
    program.outputHelp(function (str) {
        console.error(chalk["default"].redBright(str));
        return '';
    });
    process.exit(1);
};
program
    .version(pkg.version, '-v, --Version')
    .usage("[options] <fileRegex ...>")
    .option("-o, output <path>", "Output path and filename for unified schema.")
    .description("Take JSON Schema files and merge them into a single schema file where $ref are included and allOf are merged.  Also supports component merging using $role, see readme.md for more information.")
    .parse(process.argv);
var failed = false;
mergeSchemas();
// NOTE: This relies on an internal copy of cogSchema.schema which is generated by deleting the old file 
// and then running this which will pull in the standard meta-schema from the web.
function mergeSchemas() {
    return __awaiter(this, void 0, void 0, function () {
        var schemaPaths, definitions_1, validator, metaSchema, _i, schemaPaths_1, schemaPath, schema, _a, _b, _c, error, filename, type, e_1, finalSchema, schema, lg, _d, schemaPaths_2, schemaPath;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0: return [4 /*yield*/, glob(program.args)];
                case 1:
                    schemaPaths = _e.sent();
                    if (!(schemaPaths.length == 0)) return [3 /*break*/, 2];
                    program.help();
                    return [3 /*break*/, 18];
                case 2:
                    definitions_1 = {};
                    validator = new Validator();
                    return [4 /*yield*/, getMetaSchema()];
                case 3:
                    metaSchema = _e.sent();
                    validator.addSchema(metaSchema, 'cogSchema');
                    _i = 0, schemaPaths_1 = schemaPaths;
                    _e.label = 4;
                case 4:
                    if (!(_i < schemaPaths_1.length)) return [3 /*break*/, 9];
                    schemaPath = schemaPaths_1[_i];
                    console.log(chalk["default"].grey("Parsing " + schemaPath));
                    _e.label = 5;
                case 5:
                    _e.trys.push([5, 7, , 8]);
                    _a = allof;
                    return [4 /*yield*/, parser.dereference(schemaPath)];
                case 6:
                    schema = _a.apply(void 0, [_e.sent()]);
                    if (schema.$id) {
                        console.log(chalk["default"].yellowBright("  Skipping because of top-level $id:" + schema.$id + "."));
                    }
                    else {
                        delete schema.$schema;
                        if (!validator.validate('cogSchema', schema)) {
                            for (_b = 0, _c = validator.errors; _b < _c.length; _b++) {
                                error = _c[_b];
                                schemaError(error);
                            }
                        }
                        filename = schemaPath.split(/[\\\/]/).pop();
                        type = filename.substr(0, filename.lastIndexOf("."));
                        if (!schema.type && !isUnionType(schema)) {
                            schema.type = "object";
                        }
                        definitions_1[type] = schema;
                    }
                    return [3 /*break*/, 8];
                case 7:
                    e_1 = _e.sent();
                    thrownError(e_1);
                    return [3 /*break*/, 8];
                case 8:
                    _i++;
                    return [3 /*break*/, 4];
                case 9:
                    fixDefinitionReferences(definitions_1);
                    processRoles(definitions_1, metaSchema);
                    addTypeTitles(definitions_1);
                    expandTypes(definitions_1);
                    addStandardProperties(definitions_1, metaSchema);
                    if (!program.output) {
                        program.output = "app.schema";
                    }
                    finalSchema = {
                        $schema: metaSchema.$id,
                        $id: path.basename(program.output),
                        type: "object",
                        title: "Component types",
                        description: "These are all of the types that can be created by the loader.",
                        oneOf: Object.keys(definitions_1)
                            .filter(function (schemaName) { return !isUnionType(definitions_1[schemaName]); })
                            .sort()
                            .map(function (schemaName) {
                            return {
                                title: schemaName,
                                description: definitions_1[schemaName].description || "",
                                $ref: "#/definitions/" + schemaName
                            };
                        }),
                        definitions: definitions_1
                    };
                    if (!!failed) return [3 /*break*/, 17];
                    console.log("Writing " + program.output);
                    return [4 /*yield*/, fs.writeJSON(program.output, finalSchema, { spaces: 4 })];
                case 10:
                    _e.sent();
                    schema = new st.schemaTracker();
                    return [4 /*yield*/, schema.getValidator(program.output)];
                case 11:
                    _e.sent();
                    lg = new lgt.LGTracker(schema);
                    _d = 0, schemaPaths_2 = schemaPaths;
                    _e.label = 12;
                case 12:
                    if (!(_d < schemaPaths_2.length)) return [3 /*break*/, 15];
                    schemaPath = schemaPaths_2[_d];
                    return [4 /*yield*/, lg.addLGFiles([path.join(path.dirname(schemaPath), path.basename(schemaPath, ".schema") + "*.lg")])];
                case 13:
                    _e.sent();
                    _e.label = 14;
                case 14:
                    _d++;
                    return [3 /*break*/, 12];
                case 15: return [4 /*yield*/, lg.writeFiles(path.join(path.dirname(program.output), path.basename(program.output, ".schema") + ".lg"))];
                case 16:
                    _e.sent();
                    return [3 /*break*/, 18];
                case 17:
                    console.log("Could not merge schemas");
                    _e.label = 18;
                case 18: return [2 /*return*/];
            }
        });
    });
}
function getMetaSchema() {
    return __awaiter(this, void 0, void 0, function () {
        var metaSchema, schemaName, baseName, schema, metaSchemaName, _a, _b, prop, propDef, subProp;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    schemaName = path.join(__dirname, "../src/cogSchema.schema");
                    return [4 /*yield*/, fs.pathExists(schemaName)];
                case 1:
                    if (!!(_c.sent())) return [3 /*break*/, 5];
                    console.log("Generating cogSchema.schema");
                    baseName = path.join(__dirname, "../src/baseCogSchema.schema");
                    return [4 /*yield*/, fs.readJSON(baseName)];
                case 2:
                    schema = _c.sent();
                    metaSchemaName = schema.$schema;
                    _b = (_a = JSON).parse;
                    return [4 /*yield*/, getURL(metaSchemaName)];
                case 3:
                    metaSchema = _b.apply(_a, [_c.sent()]);
                    for (prop in schema) {
                        propDef = schema[prop];
                        if (typeof propDef === "string") {
                            metaSchema[prop] = propDef;
                        }
                        else {
                            for (subProp in propDef) {
                                metaSchema[prop][subProp] = propDef[subProp];
                            }
                        }
                    }
                    metaSchema.$comment = "This file is generated by running the cogSchema node tool when there is not a cogSchema.schema file.";
                    return [4 /*yield*/, fs.writeJSON(schemaName, metaSchema, { spaces: 4 })];
                case 4:
                    _c.sent();
                    return [3 /*break*/, 7];
                case 5: return [4 /*yield*/, fs.readJSON(schemaName)];
                case 6:
                    metaSchema = _c.sent();
                    _c.label = 7;
                case 7: return [2 /*return*/, metaSchema];
            }
        });
    });
}
function processRoles(definitions, metaSchema) {
    var _loop_1 = function (type) {
        walkJSON(definitions[type], function (val, _obj, key) {
            if (val.$role) {
                if (typeof val.$role === "string") {
                    processRole(val.$role, val, type, definitions, metaSchema, key);
                }
                else {
                    for (var _i = 0, _a = val.$role; _i < _a.length; _i++) {
                        var role = _a[_i];
                        processRole(role, val, type, definitions, metaSchema, key);
                    }
                }
            }
            return false;
        });
    };
    for (var type in definitions) {
        _loop_1(type);
    }
}
function processRole(role, elt, type, definitions, metaSchema, key) {
    var prefix = "unionType(";
    if (role === "lg") {
        if (!key) {
            errorMsg(type, "lg $role must be in a property defnition.");
        }
        if (elt.type) {
            errorMsg(type, "$role:lg should not have a type.");
        }
        for (var prop in metaSchema.definitions.lg) {
            elt[prop] = metaSchema.definitions.lg[prop];
        }
    }
    else if (role === "unionType") {
        if (key) {
            errorMsg(type, "unionType $role can only be defined at the top of the schema definition.");
        }
    }
    else if (role.startsWith(prefix) && role.endsWith(")")) {
        var unionType = role.substring(prefix.length, role.length - 1);
        if (!definitions[unionType]) {
            errorMsg(type, "union type " + unionType + " is not defined.");
        }
        else if (!isUnionType(definitions[unionType])) {
            errorMsg(unionType, "is missing $role of unionType.");
        }
        else {
            var definition = definitions[type];
            var unionDefinition = definitions[unionType];
            if (!unionDefinition.oneOf) {
                unionDefinition.oneOf = [];
            }
            unionDefinition.oneOf.push({
                title: type,
                description: definition.description || "",
                $ref: "#/definitions/" + type
            });
        }
    }
}
function addTypeTitles(definitions) {
    walkJSON(definitions, function (val) {
        if (val.oneOf) {
            walkJSON(val.oneOf, function (def) {
                if (def.type) {
                    // NOTE: This overrides any existing title but prevents namespace collision
                    def.title = def.type;
                }
                return false;
            });
        }
        return false;
    });
}
function fixDefinitionReferences(definitions) {
    var _loop_2 = function (type) {
        walkJSON(definitions[type], function (val) {
            if (val.$ref) {
                var ref = val.$ref;
                if (ref.startsWith("#/definitions/")) {
                    val.$ref = "#/definitions/" + type + "/definitions" + ref.substr(ref.indexOf('/'));
                }
            }
            return false;
        });
    };
    for (var type in definitions) {
        _loop_2(type);
    }
}
function expandTypes(definitions) {
    walkJSON(definitions, function (val) {
        if (val.$type) {
            if (definitions.hasOwnProperty(val.$type)) {
                val.$ref = "#/definitions/" + val.$type;
            }
            else {
                missing(val.$type);
            }
        }
        return false;
    });
}
function addStandardProperties(definitions, cogSchema) {
    for (var type in definitions) {
        var definition = definitions[type];
        if (!isUnionType(definition)) {
            // Reorder properties to put $ first.
            var props = {
                $type: clone(cogSchema.definitions.type),
                $copy: cogSchema.definitions.copy,
                $id: cogSchema.definitions.id
            };
            props.$type["const"] = type;
            if (definition.properties) {
                for (var prop in definition.properties) {
                    props[prop] = definition.properties[prop];
                }
            }
            definition.properties = props;
            definition.additionalProperties = false;
            definition.patternProperties = { "^\\$": { type: "string" } };
            if (definition.required) {
                var required = definition.required;
                definition.required = ["$type"];
                definition.anyOf = [
                    {
                        title: "Reference",
                        required: ["$copy"]
                    },
                    {
                        title: "Type",
                        required: required
                    }
                ];
            }
            else {
                definition.required = ["$type"];
            }
        }
    }
}
function walkJSON(elt, fun, obj, key) {
    var done = fun(elt, obj, key);
    if (!done) {
        if (Array.isArray(elt)) {
            for (var _i = 0, elt_1 = elt; _i < elt_1.length; _i++) {
                var val = elt_1[_i];
                done = walkJSON(val, fun);
                if (done)
                    break;
            }
        }
        else if (typeof elt === 'object') {
            for (var val in elt) {
                done = walkJSON(elt[val], fun, elt, val);
                if (done)
                    break;
            }
        }
    }
    return done;
}
function getURL(url) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    var http = require('http'), https = require('https');
                    var client = http;
                    if (url.toString().indexOf("https") === 0) {
                        client = https;
                    }
                    client.get(url, function (resp) {
                        var data = '';
                        // A chunk of data has been recieved.
                        resp.on('data', function (chunk) {
                            data += chunk;
                        });
                        // The whole response has been received. 
                        resp.on('end', function () {
                            resolve(data);
                        });
                    }).on("error", function (err) {
                        reject(err);
                    });
                })];
        });
    });
}
;
function isUnionType(schema) {
    return schema.$role === "unionType";
}
var missingTypes = new Set();
function missing(type) {
    if (!missingTypes.has(type)) {
        console.log(chalk["default"].redBright("Missing " + type + " schema file from merge."));
        missingTypes.add(type);
        failed = true;
    }
}
function schemaError(error) {
    console.log(chalk["default"].redBright("  " + error.dataPath + " " + error.message));
    failed = true;
}
function thrownError(error) {
    console.log(chalk["default"].redBright("  " + error.message));
    failed = true;
}
function errorMsg(type, message) {
    console.log(chalk["default"].redBright(type + ": " + message));
    failed = true;
}
